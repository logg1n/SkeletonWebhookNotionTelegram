import asyncio
import logging
from contextlib import suppress

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import setup_application

from telegram_bot import router
from utils.config import settings
from utils.queue import notion_queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token, parse_mode=ParseMode.HTML)
dp = Dispatcher()
dp.include_router(router)


async def process_queue():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    logger.info("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏")
    while True:
        msg = await notion_queue.get()
        try:
            if msg:
                await bot.send_message(chat_id=settings.chat_id, text=msg)
            else:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        except Exception:
            logger.exception("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        finally:
            notion_queue.task_done()
        await asyncio.sleep(0.01)


async def on_startup(app: web.Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏."""
    await bot.set_webhook(settings.webhook_url)
    logger.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {settings.webhook_url}")

    task = asyncio.create_task(process_queue())
    app["queue_task"] = task


async def on_shutdown(app: web.Application):
    """–£–¥–∞–ª—è–µ–º webhook –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å."""
    logger.info("üõë –®—É—Ç–¥–∞—É–Ω: —É–¥–∞–ª—è–µ–º webhook –∏ –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞—Å–∫–∏")
    with suppress(Exception):
        await bot.delete_webhook()

    task = app.get("queue_task")
    if task:
        task.cancel()
        with suppress(asyncio.CancelledError):
            await task

    with suppress(Exception):
        await bot.session.close()


def create_app() -> web.Application:
    """–§–∞–±—Ä–∏–∫–∞ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Aiogram-webhook."""
    app = web.Application()
    setup_application(app, dp, bot=bot, path=settings.webhook_path)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    async def health(request):
        return web.json_response({"status": "ok"})
    app.router.add_get("/health", health)

    return app


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º aiohttp-—Å–µ—Ä–≤–µ—Ä."""
    app = create_app()
    logger.info(f"üì° –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {settings.port}")
    web.run_app(app, port=settings.port)


if __name__ == "__main__":
    main()
